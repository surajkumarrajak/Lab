pipeline{
    agent any
    environment {
    registry = "rajak123/assignment"
    registryCredential = "dockerhub"
    dockerImage = '' 
  }
    stages {
        stage ('initialize'){
            steps {
                sh '''
                    echo "Initializing"
                ''' 
            }
        }
        stage ('Build Application') {
            steps {
                sh 'mvn -f my-app/pom.xml clean package'
                sh """
                echo "Building Artefacts"
                """
            }
            post {
                success {
                    echo "Now Archiving the Artifacts...."
                    archiveArtifacts artifacts: '**/*.jar'
                }
            }
        }
        stage('Sonarqube') {
            environment {
                scannerHome = tool 'sonarqubescanner'
            }    
            steps {
                withSonarQubeEnv('sonarqube') {
                   sh """
                    echo ${scannerHome}/bin/sonar-scanner
                    ${scannerHome}/bin/sonar-scanner
                     """
                }      
               /* timeout(time: 10, unit: 'MINUTES') {
                 waitForQualityGate abortPipeline: true
                } */
            }
        }
        stage('Save artifacts') {
            steps {
                
                archiveArtifacts artifacts: '**/*.jar', fingerprint: true
            }
        }
       /* stage('Create Tomcat Docker Image'){
            steps {
                sh "pwd"
                sh "ls -a"
                sh "docker build . -t mavenhelloworld:${env.BUILD_ID}"
            }
        }
        stage('Deploy Image') {
            steps{
                script {
                    docker.withRegistry( '', registryCredential ) {
                    dockerImage.push()
                    }
                }
            }
         } */
          stage('Building our image') { 
            steps { 
                script { 
                    dockerImage = docker.build registry + ":$BUILD_NUMBER" 
                }
            }
        }
        stage('Deploy our image') { 
            steps { 
                script { 
                    docker.withRegistry( '', registryCredential ) { 
                        dockerImage.push() 
                    }
                }
            }
            post {
                always {
                    mail to: 'robotm095@gmail.com',
                    mail to: 'surajkumarrajak14@gmail.com',
                    mail to: 'sdeeksha167@gmail.com',
                        subject: "Status of pipeline: ${currentBuild.fullDisplayName}",
                            body: "${env.BUILD_URL} for DEV branch has result ${currentBuild.result}"
                }
            }

        }
    }
}
