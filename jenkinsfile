def week = [1:'Sunday', 2:'Monday', 3:'Tuesday', 4:'Wednesday', 5:'Thursday', 6:'Friday', 7:'Saturday']
pipeline{
    agent any
     triggers {
        pollSCM '0 * * * *'
    }
    environment {
    registry = "rajak123/assignment_qa"
    registryCredential = "dockerhub"
    dockerImage = ''
     /*EMAIL_INFORM = 'surajkumarrajak14@gmail.com','robotm095@gmail.com','sdeeksha167@gmail.com'*/
  }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    stages {
        stage ('initialize'){
            when {
                expression { week[new Date()[Calendar.DAY_OF_WEEK]] == 'Sunday'}
            }
            steps { 
                script {
                    sh '''
                        echo "This is sunday...No builds on weekend...Enjoy!!!"
                    '''
                    abort "This pipeline stops here! Its sunday---ENJOY!!!"
                }
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh '''
                        echo "Initializing"
                    '''
                }
            }
        }
        stage ('Build Application') {
            steps {
                sh 'mvn -f my-app/pom.xml clean package'
                sh """
                echo "Building Artefacts"
                """
            }
        }
        stage('Test'){
            steps{
                sh """
                echo "Testing"
                """
            }
            post {
                success {
                    echo "Now Archiving the Artifacts...."
                    archiveArtifacts artifacts: '**/*.jar'
                }
            }

        }
        stage('Sonarqube') {
            environment {
                scannerHome = tool 'sonarqubescanner'
            }    
            steps {
                withSonarQubeEnv('sonarqube') {
                   sh """
                    echo ${scannerHome}/bin/sonar-scanner
                    ${scannerHome}/bin/sonar-scanner
                     """
                }      
               /* timeout(time: 10, unit: 'MINUTES') {
                 waitForQualityGate abortPipeline: true
                } */
            }
        }
        stage('Selenium test'){
            steps{
                sh 'mvn -f my-app/pom.xml test'            
            }
        }
        /*stage('Save artifacts') {
            steps {
                
                archiveArtifacts artifacts: '***.jar', fingerprint: true
            }
        }
         stage('Create Tomcat Docker Image'){
            steps {
                sh "pwd"
                sh "ls -a"
                sh "docker build . -t mavenhelloworld:${env.BUILD_ID}"
            }
        }
        stage('Deploy Image') {
            steps{
                script {
                    docker.withRegistry( '', registryCredential ) {
                    dockerImage.push()
                    }
                }
            }
         } */
        stage('Building our image') { 
            steps { 
                script { 
                    dockerImage = docker.build registry + ":$BUILD_NUMBER" 
                }
            }
        }
        stage('Push image') { 
            steps { 
                script { 
                    docker.withRegistry( '', registryCredential ) { 
                        dockerImage.push() 
                    }
                }
            }
            post {
                always {
                    emailext (
                        attachmentsPattern: '**/emailable-report.html',
                        from: 'robotm095@gmail.com',
                        to: 'surajkumarrajak14@gmail.com,robotm095@gmail.com,sdeeksha167@gmail.com',
                        subject: "Status of pipeline: ${currentBuild.fullDisplayName}",
                        body: "${env.BUILD_URL} for QA branch has result ${currentBuild.result}. Please go to URL and approve for deployment."
                        )
                }
            } 
        }
        stage('Approval') {
            // no agent, so executors are not used up when waiting for approvals
            agent none
            steps {
                script {
                    def deploymentDelay = input id: 'Deploy', message: 'Deploy to production?', submitter: 'suraj,DevOps', parameters: [choice(choices: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24'], description: 'Hours to delay deployment?', name: 'deploymentDelay')]
                    sleep time: deploymentDelay.toInteger(), unit: 'HOURS'
                }
            }
        }
        stage('Deploy Application'){
            steps{
                script{
                    docker.withRegistry('', registryCredential) {
                    image = docker.image('rajak123/assignment_qa:$BUILD_NUMBER')
                    image.pull()
                   
                    }
                }
                sh "docker container run rajak123/assignment_qa:$BUILD_NUMBER"
            }
        }
    }
}    
